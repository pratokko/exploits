// // SPDX-License-Identifier: MIT


pragma solidity 0.8.20;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";
import {YeildERC20} from "../../mocks/YeildERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract AttemptedBreakTest is StdInvariant, Test {
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;
    address user = makeAddr("user");
    uint256 startingBalance;
    IERC20[] supportedTokens;

    function setUp() public {
        vm.startPrank(user);
        mockUSDC = new MockUSDC();
        yeildERC20 = new YeildERC20();
        supportedTokens.push(mockUSDC);
        supportedTokens.push(yeildERC20);
        startingBalance = yeildERC20.INITIAL_SUPPLY();
        mockUSDC.mint(user, startingBalance);
        handlerStatefulFuzzCatches = new HandlerStatefulFuzzCatches(
            supportedTokens
        );
    }

    function testStartingbalance() public view {
        assert(mockUSDC.balanceOf(user) == startingBalance);
        assert(yeildERC20.balanceOf(user) == startingBalance);
    }

    function invariant_BalanceOk() public {
        handlerStatefulFuzzCatches.withdrawToken(mockUSDC);
        handlerStatefulFuzzCatches.withdrawToken(yeildERC20);

        assert(mockUSDC.balanceOf(address(handlerStatefulFuzzCatches)) == 0);
        assert(yeildERC20.balanceOf(address(handlerStatefulFuzzCatches)) == 0);

        assert(mockUSDC.balanceOf(user) == startingBalance);
        assert(yeildERC20.balanceOf(user) == startingBalance);
    }
}
